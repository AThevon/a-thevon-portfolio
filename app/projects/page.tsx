"use client";

import { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { Draggable } from "gsap/Draggable";

gsap.registerPlugin(Draggable);

export default function Projets() {
  const projects = [
    { name: "Create Next App 1", description: "Generated by create next app", path: " " },
    { name: "Create Next App 2", description: "Generated by create next app", path: " " },
    { name: "Create Next App 3", description: "Generated by create next app", path: " " },
    { name: "Create Next App 4", description: "Generated by create next app", path: " " },
    { name: "Create Next App 5", description: "Generated by create next app", path: " " },
    { name: "Create Next App 6", description: "Generated by create next app", path: " " },
  ];

  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    const visibleWidth = container.parentElement?.offsetWidth || 0;
    const cardGap = 28; // Taille du `gap` en pixels (ou utilise la valeur exacte en fonction de ton CSS)
    const cardWidth = (container.firstChild as HTMLElement)?.getBoundingClientRect().width || 0;
    const contentWidth = projects.length * (cardWidth + cardGap) - cardGap; // Largeur totale avec le `gap`
    let velocity = 0; // Stocke la vitesse actuelle du drag
    let lastPosition = 0; // Stocke la dernière position de drag

    // Positionner le conteneur à x = 0 au départ
    gsap.set(container, { x: 0 });

    // Créer Draggable avec gestion des limites et de la vitesse
    const draggable = Draggable.create(container, {
      type: "x",
      onDrag: function () {
        const currentPosition = this.x;
        velocity = currentPosition - lastPosition; // Calcule la vitesse
        lastPosition = currentPosition; // Met à jour la dernière position
      },
      onRelease: function () {
        // Applique une inertie manuelle
        const targetPosition = this.x + velocity * 20; // Simule une inertie avec la vitesse
        const clampedPosition = gsap.utils.clamp(
          -(contentWidth - visibleWidth),
          0,
          targetPosition
        ); // Respecte les limites
        gsap.to(container, {
          x: clampedPosition,
          duration: 0.8,
          ease: "power3.out",
        });
      },
    });

    return () => {
      draggable[0]?.kill();
    };
  }, [projects.length]);

  return (
    <div className="w-full h-full flex justify-center items-center p-10 overflow-hidden">
      <div
        ref={containerRef}
        className="flex h-full gap-4 cursor-grab"
        style={{
          width: "auto", // La largeur est gérée dynamiquement par le script
          touchAction: "pan-y",
        }}
      >
        {projects.map((project, index) => (
          <div
            key={index}
            className="bg-red-500 rounded-xl shadow-xl p-8 flex-none w-[20%] h-full flex flex-col justify-between"
          >
            <h2 className="text-2xl font-semibold mb-4">{project.name}</h2>
            <p className="text-lg mb-4">{project.description}</p>
            <a
              href={project.path}
              target="_blank"
              rel="noopener noreferrer"
              className="bg-primary-600 hover:bg-primary-500 px-6 py-3 rounded-lg flex items-center justify-center"
            >
              Voir le projet
            </a>
          </div>
        ))}
      </div>
    </div>
  );
}